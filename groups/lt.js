process.env.TZ = "Europe/Moscow"; // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –∞ –í—ã—à–µ —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏!

/* Default module */
const roulette = require('../modules/roulette/roulette');
const utils = require("../modules/utils"); // –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –±–æ—Ç—É [–ö—Ä–∞—Å–∏–í—ã–µ –¥–µ–Ω—å–≥–∏, ID –∏–≥—Ä–æ–∫–∞ –∏ –¥—Ä.]
const cmd = require("../modules/cmd"); // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
const user = require("../modules/db/ProfileConnect"); // –ü—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!
const fs = require('fs');
const md5 = require(`md5`);
const request = require('request');
const { regDataBase, vkId, random } = require('../modules/utils');
let twidmk = new Object();
const config = require("../config/data.json");
const { VK, Keyboard, MessageContext } = require('vk-io');
const { HearManager } = require('@vk-io/hear');
const hearManager = new HearManager();
/*----------------------------------------------------------------------------------------------------------*/
/*–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É:*/
/*----------------------------------------------------------------------------------------------------------*/
// –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞:
const lt = 'lt';
const group_name = lt;
const group_id = config.lt.group_id; // ID –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∫–ª—é—á–µ–Ω –±–æ—Ç
const vk = new VK({
    token: config.lt.group_token,
    lang: "ru",
    pollingGroupId: group_id,
    apiMode: "parallel"
});

const page = new VK({ token: config.lt.page_token });

const COLL_NAME = config.lt.dataBase;
const donate_app = config.lt.donate_app;
const donate_app_id = config.lt.donate_app_id;
const report = config.common.report;
const answer = config.common.answer;

const { updates } = vk;
/*----------------------------------------------------------------------------------------------------------*/
/*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*/
/*----------------------------------------------------------------------------------------------------------*/
console.log("[–õ–∞–π–∫ –¢–∞–π–º] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!"); // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
/*----------------------------------------------------------------------------------------------------------*/
updates.startPolling();
updates.on('message', async(msg, next) => {
    if (msg.senderId < 0) return; // –ò–≥–Ω–æ—Ä –µ—Å–ª–∏ –ø–∏—à–µ—Ç –≥—Ä—É–ø–ø–∞!
    if (!msg.text) return; // –ò–≥–Ω–æ—Ä –µ—Å–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç!
    if (/\[club164711863\|(.*)\]/i.test(msg.text)) msg.text = msg.text.replace(/\[club164711863\|(.*)\]/ig, '').trim(); // group

    msg.user = await utils.dataBase(msg.senderId, group_name);

    /**
     * –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "–º–∞—Ä–∫–µ—Ç" –∏–ª–∏ "—É—Å–ª—É–≥–∏"
     */
    if (msg.hasAttachments()) {
        if (msg.attachments[0].toString() == 'market-165367966_4288523') {
            return msg.send(`üíå –î–æ–Ω–∞—Ç –ø—Ä–∏–º–∏–º–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ \n\n–ü–ï–†–ï–•–û–î–ò üëâ ${donate_app}`)
        }
        if (msg.attachments[0].toString() == 'market-164711863_5399019') {
            return cmd.marketBall(msg, donate_app);
        }
        if (msg.attachments[0].toString() == 'market-164711863_5399021') {
            return cmd.marketFirst(msg, donate_app);
        }
        if (msg.attachments[0].toString() == 'market-164711863_5399023') {
            return cmd.marketApart(msg, donate_app);
        }
        if (msg.attachments[0].toString() == 'market-164711863_5399024') {
            return cmd.marketPin(msg, donate_app);
        }
    }

    if (msg.referralSource && msg.referralValue) {


        if (msg.referralSource && msg.referralValue == msg.senderId) return msg.send(`‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.`);
        if (msg.user.ref) return msg.send(`‚ö† –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.`);

        let ui = Number(msg.referralSource);
        let id = await utils.vkId(ui, group_name),
            t = await user(COLL_NAME, id);
        if (!t) return msg.send(`‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

        t.referrals += 1;
        vk.api.messages.send({ user_id: t.vk, random_id: Math.random() * 99999, message: `‚úÖ –í–∞—à @id${msg.senderId} (–¥—Ä—É–≥) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É \n\n –¢–µ–ø–µ—Ä—å –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –±—É–¥–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –í–∞–º –±–∞–ª–ª—ã üí´` });

        msg.user.ref = msg.referralSource;
        msg.user.balance += 5;
        return msg.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ [id${t.vk}|–¥—Ä—É–≥–∞], –í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ 5üåü\n`);
    }

    msg.original = msg.text
    msg.params_org = msg.original.split(" ");
    msg.params_org.shift();
    msg.params = msg.text.split(" ");
    msg.params.shift();
    msg.params_alt = msg.text.split(" ");
    console.log(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ID: ${msg.senderId}\n MSG: ${msg.text}`);
    // msg.user.lastOnline = Date.now(); // –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!

    // if (msg.user.balance < 0 || isNaN(msg.user.balance) || !isFinite(msg.user.balance)) msg.user.balance = 1

    utils.anyTime(msg, group_name);

    await next();
});

vk.updates.on('message_new', hearManager.middleware);


/*-------------------------------------------------------------------*/
/*     |                       
/*     |                        –ö–æ–º–∞–Ω–¥—ã      
/*     V                        
/*-------------------------------------------------------------------*/
hearManager.hear(/^(–Ω–∞—á–∞—Ç—å)$/ig, async(msg) => cmd.start(msg));
hearManager.hear(/^(–ö–æ–º–∞–Ω–¥—ã üìù|–ú–µ–Ω—é üìù|–∫–æ–º–∞–Ω–¥—ã|–º–µ–Ω—é|–Ω–∞—á–∞—Ç—å|—Å–ø–∞—Å–∏–±–æ|–°–ü–ê–°–ò–ë–û ü§ó)$/ig, async(msg) => cmd.menu(msg));
hearManager.hear(/^(?:(–ë–∞–ª–∞–Ω—Å üåü|–±–∞–ª–∞–Ω—Å|–º–æ–∏ –±–∞–ª–ª—ã üåü))$/ig, async(msg) => cmd.balance(msg, group_name));
hearManager.hear(/^(?:(–ù–µ —Ö–æ—á—É –∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã üåö|–ü–û–ü–û–õ–ù–ò–¢–¨ –ë–ê–õ–õ–´ üåü|–ü–û–ü–û–õ–ù–ò–¢–¨ üåü))$/ig, async(msg) => cmd.noHoard(msg, group_name));
hearManager.hear(/^(?:(–ª—Ç –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏ üíô|–ª—Ç|–±–µ–∑ –æ—á–µ—Ä–µ–¥–∏))$/ig, async(msg) => cmd.liketimeOutTurn(msg, group_name));
hearManager.hear(/^(?:(—Ä–µ—Ñ–µ—Ä–∞–ª|—Ä–µ—Ñ|—Ä–µ—Ñ–∫–∞|–†–µ—Ñ–µ—Ä–∞–ª üë£))$/ig, async(msg) => cmd.referrals(msg, group_name));
// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
hearManager.hear(/^(?:(–•–û–ß–£ –í –õ–¢ üòç|info|–∫–∞–∫|–∏–Ω—Ñ–æ—Ä–º[–∞–æ]—Ü–∏—è|–¥–∞–≤–∞–π üëÄ))$/ig, async(msg) => cmd.info(msg));
hearManager.hear(/^(?:(–¥–∞ üíô|–¥[–æ–∞]))$/ig, async(msg) => cmd.yes(msg));
hearManager.hear(/^(?:(–Ω–µ—Ç üíî|–Ω–µ—Ç))$/ig, async(msg) => cmd.no(msg));
hearManager.hear(/^(?:(–æ—Ç–∫—Ä—ã—Ç–æ ‚úÖ|[–∞–æ]—Ç–∫—Ä[–∏—ã]—Ç[–∞–æ]))$/ig, async(msg) => cmd.open(msg, group_name));
hearManager.hear(/^(?:(–î–ê–õ–¨–®–ï ‚û°|–¥–∞–ª—å—à–µ))$/ig, async(msg) => cmd.further(msg));
hearManager.hear(/^(?:(–ü–û–ù–Ø–¢–ù–û ‚û°|–ø–æ–Ω—è—Ç–Ω–æ))$/ig, async(msg) => cmd.understandably(msg));
hearManager.hear(/^(?:(–•–û–†–û–®–û ‚û°|—Ö–æ—Ä–æ—à–æ))$/ig, async(msg) => cmd.good(msg));
hearManager.hear(/^(?:(–í–´–ë–†–ê–¢–¨ –°–¢–ò–ö–ï–†-–ü–ê–ö üêØ|‚ôª –°–õ–ï–î–£–Æ–©–ê–Ø –°–¢–†–ê–ù–ò–¶–ê|–û–π , –Ω–µ—Ç, –≤—ã–±–µ—Ä—É –¥—Ä—É–≥–æ–π ‚ùå|–≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫))$/ig, async(msg) => cmd.stickers(msg));
hearManager.hear(/^(?:(–†—É–ª–µ—Ç–∫–∞ üé∞|—Ä—É–ª–µ—Ç–∫–∞|üêí|üçå|üçã|üçí|üçá))$/ig, async(msg) => roulette.spin(msg, group_name));


hearManager.hear(/^(?:(–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï|–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî|—É–≤–µ–¥[–∞–æ]–º–ª–µ–Ω–∏[–µ—è]))$/ig, async(msg) => cmd.alert(msg));
// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å                      
hearManager.hear(/^(?:(–æ—á–µ—Ä–µ–¥—å|üë§ –û—á–µ—Ä–µ–¥—å))$/ig, async(msg) => cmd.turn(msg, group_name));

// –ª–∞–π–∫–∏ –≤ –õ–°:
hearManager.hear(/^(?:(–ï—â—ë –±–∞–ª–ª—ã üî•|–û–ë–ú–ï–ù üíô|‚è≠ –°–ª–µ–¥—É—é—â–∏–π|[–∞–æ]—Ü[–∏–µ]–Ω–∏—Ç—å))$/ig, async(msg) => cmd.changeLikes(msg, group_name));
hearManager.hear(/^(?:(‚úÖ))$/ig, async(msg) => cmd.ready(msg, group_name));
hearManager.hear(/^(?:(‚ùå))$/ig, async(msg) => cmd.cancel(msg, group_name));

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ
hearManager.hear(/^(mailing)/ig, async(msg) => cmd.mailing(msg, group_name));
hearManager.hear(/(?:!)\s([^]+)/i, async(msg) => cmd.eval(msg, group_name));
hearManager.hear(/^(?:(givemoder))/ig, async(msg) => cmd.giveModer(msg, group_name));
hearManager.hear(/^(?:(givevip))/ig, async(msg) => cmd.giveVip(msg, group_name));
hearManager.hear(/^(?:(–¥–æ–±–∞–≤–∏—Ç—å))/ig, async(msg) => cmd.addPhoto(msg, group_name));
hearManager.hear(/^(?:(givebalance))/ig, async(msg) => cmd.givebalance(msg, group_name));
hearManager.hear(/^(updatedb)/ig, async(msg) => cmd.updatedb(msg, group_name));
hearManager.hear(/^(!–ª–∏—á–∫–∞)/ig, async(msg) => {
    if (msg.user.permission < 5) return msg.send(`‚ùå —É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!`);
    if (!msg.params_org[0]) return msg.answer(`–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: !—Ä–∞—Å—Å—ã–ª–∫–∞ 0 [—Ç–µ–∫—Å—Ç] \n –≥–¥–µ 0 , —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–æ—Ç–∫–∏, –ø–æ—Å—Ç—ã). –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ 0`);
    if (!msg.params_org[1]) return msg.answer(`—É–∫–∞–∂–∏—Ç–µ —Ñ—Ä–∞–∑—É –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!`);
    const { collect } = vk;
    let a = msg.params_org.join(" ").split(' ');
    let text = msg.params_org.join(" ").replace(a.shift(1), "");
    let attachments = msg.params_org[0];
    const collectStream = collect.messages.getConversations({});
    collectStream.on('error', console.error);
    collectStream.on('data', ({ total, percent, received, items }) => {
        msg.send(` 
    –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${total} 
    –ü—Ä–æ—Ü–µ–Ω—Ç–æ–≤: ${percent} 
    –ü—Ä–∏–Ω—è—Ç–æ: ${received}`);
        for (i = 0; i < items.length; i++) {
            vk.api.messages.send({
                peer_id: items[i].conversation.peer.id,
                random_id: 0,
                user_id: user.vk,
                attachment: attachments,
                message: text
            }).catch((error) => { throw error; });
        }
    });
    collectStream.on('end', () => {
        return msg.send(`–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.`);
    });
});

// –†–µ–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º–∞
hearManager.hear(/^(?:(–†–µ–ø–æ—Ä—Ç üÜò|—Ä–µ–ø–æ—Ä—Ç|–±–∞–≥|–ø—Ä[–∏–µ]–¥–ª[–∞–æ]–∂–∏—Ç—å))$/ig, async(msg) => cmd.faq(msg));
hearManager.hear(/^(?:(üÜò –†–µ–ø–æ—Ä—Ç))$/ig, async(msg) => cmd.report(msg, group_name));
hearManager.hear(/^(?:(–æ—Ç–≤–µ—Ç))/ig, async(msg) => cmd.answer(msg, group_name));

updates.on('message_event', async(obj) => {
    if (obj.eventPayload.event_id == report) {
        let userDB = await vkId(obj.userId, group_name),
            target = await user(COLL_NAME, userDB);

        if (obj.eventPayload.event_id == 5) {
            let sticker = obj.eventPayload.data;

            if (target.sticker) return vk.api.messages.sendMessageEventAnswer({ event_id: obj.eventId, user_id: obj.userId, peer_id: obj.peerId, event_data: JSON.stringify({ type: "show_snackbar", text: `‚ùå –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫` }) }) // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ snackbar'–µ.
            if (target.issued) return vk.api.messages.sendMessageEventAnswer({ event_id: obj.eventId, user_id: obj.userId, peer_id: obj.peerId, event_data: JSON.stringify({ type: "show_snackbar", text: "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫" }) }) // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ snackbar'–µ.

            vk.api.messages.send({
                user_id: target.vk,
                random_id: 0,
                message: `üêæ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ \n${sticker}?`,
                keyboard: JSON.stringify({
                    inline: true,
                    buttons: [
                        [{ "action": { "type": "text", "label": "–û–π , –Ω–µ—Ç, –≤—ã–±–µ—Ä—É –¥—Ä—É–≥–æ–π ‚ùå" }, "color": "negative" }],
                        [{ "action": { "type": "callback", "payload": { "text": "show_snackbar", "event_id": 5.1, 'data': sticker }, "label": `–í–°–ï –í–ï–†–ù–û ‚úÖ` }, "color": "positive" }]
                    ]
                })
            })
            return vk.api.messages.sendMessageEventAnswer({
                event_id: obj.eventId,
                peer_id: obj.peerId,
                user_id: obj.userId,
                message: '‚Äº –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–∞–º—ã–π –Ω–∏–∑ –¥–∏–∞–ª–æ–≥–∞ ‚Äº',
                conversation_message_id: obj.conversationMessageId,
            })
        }

        if (obj.eventPayload.event_id == 5.1) {
            let sticker = obj.eventPayload.data;
            await vk.api.messages.edit({
                    peer_id: obj.peerId,
                    message: "üí¶ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ú—ã –ø–æ–¥–∞—Ä–∏–º –í–∞–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ‚åõ",
                    conversation_message_id: obj.conversationMessageId
                }) // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
            target.sticker = sticker;
            return vk.api.messages.send({
                chat_id: 24,
                random_id: 0,
                message: `üêØ –°—Ç–∏–∫–µ—Ä—ã üêØ\n\n ‚û° [id${target.vk}|${target.fname}] \n üíå –ñ–µ–ª–∞—é—â–∏–π —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫: \n${target.sticker}`,
                keyboard: JSON.stringify({
                    inline: true,
                    buttons: [
                        [{
                            "action": {
                                "type": "callback",
                                "payload": {
                                    "text": "show_snackbar",
                                    "event_id": 5.2,
                                    'data': { "user": target.vk, 'sticker': sticker }
                                },
                                "label": "–Ø –í–´–î–ê–ú ‚úÖ"
                            },
                            "color": "positive"
                        }]
                    ]
                })
            })
        }

        if (obj.eventPayload.event_id == 5.2) {
            if (target.permission < 5) {
                return vk.api.messages.sendMessageEventAnswer({
                        event_id: obj.eventId,
                        user_id: obj.userId,
                        peer_id: obj.peerId,
                        event_data: JSON.stringify({ type: "show_snackbar", text: `‚ùå —É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤` })
                    }) // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ snackbar'–µ.
            }
            let userId = obj.eventPayload.data.user;
            let sticker = obj.eventPayload.data.sticker;
            let id = await vkId(COLL_NAME, userId, vk),
                t = await user(COLL_NAME, id);

            t.issued = true;

            return vk.api.messages.edit({
                    peer_id: obj.peerId,
                    message: `üêæ [id${target.vk}|${target.fname}] –≤—ã–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @id${userId} —Å—Ç–∏–∫–µ—Ä –ø–∞–∫ (${sticker}) ‚úÖ`,
                    conversation_message_id: obj.conversationMessageId
                }) // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        }

        if (target.permission < 3) return vk.api.messages.sendMessageEventAnswer({ event_id: obj.eventId, user_id: obj.userId, peer_id: obj.peerId, event_data: JSON.stringify({ type: "show_snackbar", text: "‚ùå –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" }) }) // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ snackbar'–µ.
        let rid = obj.eventPayload.user;
        let id = await vkId(COLL_NAME, rid, vk),
            t = await user(COLL_NAME, id);


        if (t.error) return vk.api.messages.sendMessageEventAnswer({ event_id: obj.eventId, user_id: obj.userId, peer_id: obj.peerId, event_data: JSON.stringify({ type: "show_snackbar", text: "‚ùå –ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" }) }) // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ snackbar'–µ.

        target.olink = answer;
        target.answer = t.vk;

        return vk.api.messages.sendMessageEventAnswer({ event_id: obj.eventId, user_id: obj.userId, peer_id: obj.peerId, event_data: JSON.stringify({ type: "show_snackbar", text: `‚úÖ –ü–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${t.fname}` }) }) // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ snackbar'–µ.
    }
});

// event
updates.on('like_add', async(obj) => utils.like_add(obj, group_name));
updates.on('poll_vote_new', async(obj) => utils.poll_vote_new(obj, group_name));
updates.on('wall_reply_new', async(obj) => utils.wall_reply_new(obj, group_name));
updates.on(['wall_post_new'], async(obj) => utils.wall_post_new(obj, group_name));


hearManager.hear(/(.*)/igm, async(msg) => { // –ù–∞–≤–∏–≥–∞—Ü–∏—è


    let keybo = {
        disable_mentions: 1,
        keyboard: JSON.stringify({
            buttons: [
                [{ "action": { "type": "text", "label": "–ú–ï–ù–Æ üìù" }, "color": "secondary" }]
            ]
        })
    }

    if (msg.user.olink === report) {
        let text = msg.$match[0];
        msg.user.olink = 0;
        await msg.send('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–º–æ—á—å –í–∞–º.');
        return vk.api.messages.send({
            chat_id: 24,
            random_id: 0,
            message: `‚ùó –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚ùó\n\n ‚û° –û—Ç: [id${msg.senderId}|${msg.user.fname}] \n üíå –°–æ–æ–±—â–µ–Ω–∏–µ: ${text}\n\nüìù –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:`,
            keyboard: JSON.stringify({
                inline: true,
                buttons: [
                    [{ "action": { "type": "callback", "payload": { "text": "show_snackbar", "event_id": report, "user": msg.user.vk }, "label": "–û—Ç–≤–µ—Ç–∏—Ç—å ‚úÖ" }, "color": "positive" }]
                ]
            })
        })
    }

    if (msg.user.olink === answer) {
        let target = await utils.dataBase(msg.user.answer, group_name);

        await msg.send(`üìÉ [id${msg.senderId}|${msg.user.fname}] –¥–∞–ª –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [id${target.vk}|${target.fname}] üçè`);
        await vk.api.messages.send({
            user_id: Number(msg.user.answer),
            random_id: 0,
            message: `üåà –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ [id${msg.senderId}|${msg.user.fname}]: \n\nüó£ ${msg.$match[0]}`
        });
        msg.user.answer = 0;
        msg.user.olink = 0;
        return;
    }


    if (msg.user.olink >= 0 && !Number(msg.$match[0])) {
        if (msg.isChat) return;

        return msg.send(`–ü–ò–®–ò –º–Ω–µ "–ú–ï–ù–Æ" –∏–ª–∏ "–ö–û–ú–ê–ù–î–´" üëáüèª`, keybo);
    }

});